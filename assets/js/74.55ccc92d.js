(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{446:function(t,r,e){"use strict";e.r(r);var o=e(27),_=Object(o.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"node-js-应用开发实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js-应用开发实战"}},[t._v("#")]),t._v(" Node.js 应用开发实战")]),t._v(" "),e("ul",[e("li",[t._v("前端为什么要选择 Node.js 来做后端开发？")])]),t._v(" "),e("p",[t._v("懂后端的前端，在团队中的作用毋庸置疑是非常重要的，掌握一门后端语言可以使职业生涯更加广阔。")]),t._v(" "),e("p",[t._v("何况，招聘信息上会告诉你，更需要一个了解后端，甚至掌握一门后端语言的同学，这个加分项已经是常态化了。")]),t._v(" "),e("ul",[e("li",[t._v("为什么要学 Node.js 呢？Java、Go 不行吗？")])]),t._v(" "),e("p",[t._v("前端同学对 JavaScript 了解最深，而 Node.js 是运行在服务端的 JavaScript。所以从 Node.js 去学习服务端研发技术，是最合适最高效的。")]),t._v(" "),e("p",[t._v("Node.js 优点：高并发特性、研发高效能等。")]),t._v(" "),e("ul",[e("li",[t._v("什么阻碍了前端对于 Node.js 的进阶？")])]),t._v(" "),e("p",[t._v("Node.js 较多应用于前端工程化部分，作为后台系统应用较少。但 Node.js 本身就是后端的语言，这样大材小用，忽略了其本身的核心特性，没有充分发挥它的价值。")]),t._v(" "),e("p",[t._v("特别是在一些高并发系统上，因为比较缺乏这方面的实践知识，出现问题后缺少专业人才解决这些核心问题，所以团队 leader 在技术选型上就会避开 Node.js，不是因为它不能，而是真正能了解它的人太少了。")]),t._v(" "),e("p",[t._v("一些实际场景中，部分前端人员也希望使用 Node.js 来做一些后端服务应用，但应用过程中碰到了各种问题，并且苦于没有一些专业性的文章和指导方法，进度缓慢，以至于浅尝辄止，停下了探索的脚步。")]),t._v(" "),e("p",[t._v("希望我们都能不断地学习，未来对我们的要求会更高，持续更新自身的知识结构，那么未来每次面临抉择的时候都会是自身的一次机遇。")]),t._v(" "),e("h2",{attrs:{id:"核心知识点篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心知识点篇"}},[t._v("#")]),t._v(" 核心知识点篇")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/other/Node_事件循环.html"}},[t._v("事件循环：高性能是如何做到的？")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_应用场景.html"}},[t._v("应用场景：Node.js 作为后台可以提供哪些服务？")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_构建RESTful服务.html"}},[t._v("如何构建一个简单的 RESTful 服务")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_3大主流系统框架.html"}},[t._v("3 大主流系统框架：由浅入深分析 Express、Koa、Egg")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_多进程解决方案.html"}},[t._v("多进程解决方案：cluster 模式以及 PM2 工具的原理介绍")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_影响性能的原因.html"}},[t._v("哪些因素会影响 Node.js 性能")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_CPU过载保护设计.html"}},[t._v("CPU 过载保护设计：如何在服务层面确保系统稳定")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_优化设计.html"}},[t._v("优化设计：在 I/O 方面应该注意哪些要点")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_缓存与应用.html"}},[t._v("缓存与应用：多级缓存策略介绍与应用要点")])],1),t._v(" "),e("h2",{attrs:{id:"技术应用分析篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#技术应用分析篇"}},[t._v("#")]),t._v(" 技术应用分析篇")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/other/Node_系统稳定.html"}},[t._v("系统稳定：如何监控和保护进程安全")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_内存检查.html"}},[t._v("内存检查：多种类型的内存泄漏分析方案")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_性能分析.html"}},[t._v("性能分析：性能影响的关键路径以及优化策略")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_网络安全.html"}},[t._v("网络安全：常见网络攻击以及防护策略")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_工具应用.html"}},[t._v("工具应用：使用 clinicjs 工具实现通用型安全检查")])],1),t._v(" "),e("h2",{attrs:{id:"系统服务研发实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统服务研发实战"}},[t._v("#")]),t._v(" 系统服务研发实战")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/other/Node_高并发设计.html"}},[t._v("理论先行：高并发设计必须学的知识点")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_RESTful.html"}},[t._v("RESTful 应用事件：构建一个介于前后台之间的服务")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_系统的实践设计.html"}},[t._v("系统的实践设计：完成一个通用抢票系统")]),e("br"),t._v(" "),e("RouterLink",{attrs:{to:"/other/Node_Serverless的实践.html"}},[t._v("Serverless 的实践：进一步提升系统的稳定性")])],1),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")])])}),[],!1,null,null,null);r.default=_.exports}}]);