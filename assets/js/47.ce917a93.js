(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{421:function(t,a,s){"use strict";s.r(a);var r=s(27),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"uglify-原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uglify-原理"}},[t._v("#")]),t._v(" uglify 原理")]),t._v(" "),s("h2",{attrs:{id:"ast-抽象语法树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ast-抽象语法树"}},[t._v("#")]),t._v(" AST 抽象语法树")]),t._v(" "),s("h2",{attrs:{id:"代码压缩原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码压缩原理"}},[t._v("#")]),t._v(" 代码压缩原理")]),t._v(" "),s("ul",[s("li",[t._v("code 转化成 AST")]),t._v(" "),s("li",[t._v("AST 优化，生成最小的 AST")]),t._v(" "),s("li",[t._v("将优化后的 AST 转化成 code")])]),t._v(" "),s("h2",{attrs:{id:"代码压缩规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码压缩规则"}},[t._v("#")]),t._v(" 代码压缩规则")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")])])}),[],!1,null,null,null);a.default=e.exports}}]);