(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{387:function(a,t,s){"use strict";s.r(t);var r=s(27),_=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"gof介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gof介绍"}},[a._v("#")]),a._v(" GoF介绍")]),a._v(" "),s("h2",{attrs:{id:"创建型设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建型设计模式"}},[a._v("#")]),a._v(" 创建型设计模式")]),a._v(" "),s("blockquote",[s("p",[a._v("用于描述“怎么创建对象”。它的主要特点是“将对象的创建与使用分离”。如，单例、原型、工厂方法、抽象工厂、建造者等5种创建型模式。")])]),a._v(" "),s("h3",{attrs:{id:"_1-简单工厂模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单工厂模式"}},[a._v("#")]),a._v(" 1. 简单工厂模式")]),a._v(" "),s("p",[a._v("又称"),s("code",[a._v("静态工厂模式")]),a._v("，由一个工厂对象决定创建某一种产品对象类的实例。主要用来"),s("code",[a._v("创建同一类对象")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"_2-工厂方法模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-工厂方法模式"}},[a._v("#")]),a._v(" 2. 工厂方法模式")]),a._v(" "),s("p",[a._v("定义一个用于创建产品的接口，由子类决定生产什么产品.")]),a._v(" "),s("h3",{attrs:{id:"_3-抽象工厂模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-抽象工厂模式"}},[a._v("#")]),a._v(" 3. 抽象工厂模式")]),a._v(" "),s("p",[a._v("提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。")]),a._v(" "),s("h3",{attrs:{id:"_4-建造者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-建造者模式"}},[a._v("#")]),a._v(" 4. 建造者模式")]),a._v(" "),s("p",[a._v("将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。")]),a._v(" "),s("h3",{attrs:{id:"_5-原型模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-原型模式"}},[a._v("#")]),a._v(" 5. 原型模式")]),a._v(" "),s("p",[a._v("将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。")]),a._v(" "),s("h3",{attrs:{id:"_6-单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-单例模式"}},[a._v("#")]),a._v(" 6. 单例模式")]),a._v(" "),s("p",[a._v("某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。")]),a._v(" "),s("h2",{attrs:{id:"结构性设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构性设计模式"}},[a._v("#")]),a._v(" 结构性设计模式")]),a._v(" "),s("blockquote",[s("p",[a._v("用于描述“如何将类或对象按某种布局组成更大的结构”。如，代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。")])]),a._v(" "),s("h3",{attrs:{id:"_7-外观模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-外观模式"}},[a._v("#")]),a._v(" 7. 外观模式")]),a._v(" "),s("h3",{attrs:{id:"_8-适配器模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-适配器模式"}},[a._v("#")]),a._v(" 8. 适配器模式")]),a._v(" "),s("h3",{attrs:{id:"_9-代理模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-代理模式"}},[a._v("#")]),a._v(" 9. 代理模式")]),a._v(" "),s("h3",{attrs:{id:"_10-装饰者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-装饰者模式"}},[a._v("#")]),a._v(" 10. 装饰者模式")]),a._v(" "),s("h3",{attrs:{id:"_11-桥接模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-桥接模式"}},[a._v("#")]),a._v(" 11. 桥接模式")]),a._v(" "),s("h3",{attrs:{id:"_12-组合模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-组合模式"}},[a._v("#")]),a._v(" 12. 组合模式")]),a._v(" "),s("h3",{attrs:{id:"_13-享元模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-享元模式"}},[a._v("#")]),a._v(" 13. 享元模式")]),a._v(" "),s("h2",{attrs:{id:"行为型设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行为型设计模式"}},[a._v("#")]),a._v(" 行为型设计模式")]),a._v(" "),s("blockquote",[s("p",[a._v("用于描述“类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责”。如，模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录模式、解释器等11中行为模式。")])]),a._v(" "),s("h3",{attrs:{id:"_14-模版方法模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-模版方法模式"}},[a._v("#")]),a._v(" 14. 模版方法模式")]),a._v(" "),s("h3",{attrs:{id:"_15-观察者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-观察者模式"}},[a._v("#")]),a._v(" 15. 观察者模式")]),a._v(" "),s("h3",{attrs:{id:"_16-状态模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-状态模式"}},[a._v("#")]),a._v(" 16. 状态模式")]),a._v(" "),s("h3",{attrs:{id:"_17-策略模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-策略模式"}},[a._v("#")]),a._v(" 17. 策略模式")]),a._v(" "),s("h3",{attrs:{id:"_18-职责链模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-职责链模式"}},[a._v("#")]),a._v(" 18. 职责链模式")]),a._v(" "),s("h3",{attrs:{id:"_19-命令行模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-命令行模式"}},[a._v("#")]),a._v(" 19. 命令行模式")]),a._v(" "),s("h3",{attrs:{id:"_20-访问者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-访问者模式"}},[a._v("#")]),a._v(" 20. 访问者模式")]),a._v(" "),s("h3",{attrs:{id:"_21-中介者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-中介者模式"}},[a._v("#")]),a._v(" 21. 中介者模式")]),a._v(" "),s("h3",{attrs:{id:"_22-备忘录模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-备忘录模式"}},[a._v("#")]),a._v(" 22. 备忘录模式")]),a._v(" "),s("h3",{attrs:{id:"_23-迭代器模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-迭代器模式"}},[a._v("#")]),a._v(" 23. 迭代器模式")]),a._v(" "),s("h3",{attrs:{id:"_24-解释器模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-解释器模式"}},[a._v("#")]),a._v(" 24. 解释器模式")]),a._v(" "),s("h2",{attrs:{id:"技巧性设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技巧性设计模式"}},[a._v("#")]),a._v(" 技巧性设计模式")]),a._v(" "),s("h3",{attrs:{id:"_25-链模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-链模式"}},[a._v("#")]),a._v(" 25. 链模式")]),a._v(" "),s("h3",{attrs:{id:"_26-委托模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-委托模式"}},[a._v("#")]),a._v(" 26. 委托模式")]),a._v(" "),s("h3",{attrs:{id:"_27-数据访问对象模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-数据访问对象模式"}},[a._v("#")]),a._v(" 27. 数据访问对象模式")]),a._v(" "),s("h3",{attrs:{id:"_28-节流模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-节流模式"}},[a._v("#")]),a._v(" 28. 节流模式")]),a._v(" "),s("h3",{attrs:{id:"_29-简单模版模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-简单模版模式"}},[a._v("#")]),a._v(" 29. 简单模版模式")]),a._v(" "),s("h3",{attrs:{id:"_30-惰性模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-惰性模式"}},[a._v("#")]),a._v(" 30. 惰性模式")]),a._v(" "),s("h3",{attrs:{id:"_31-参与者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-参与者模式"}},[a._v("#")]),a._v(" 31. 参与者模式")]),a._v(" "),s("h3",{attrs:{id:"_32-等待者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-等待者模式"}},[a._v("#")]),a._v(" 32. 等待者模式")]),a._v(" "),s("h2",{attrs:{id:"架构型设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#架构型设计模式"}},[a._v("#")]),a._v(" 架构型设计模式")]),a._v(" "),s("h3",{attrs:{id:"_33-同步模块模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33-同步模块模式"}},[a._v("#")]),a._v(" 33. 同步模块模式")]),a._v(" "),s("h3",{attrs:{id:"_34-异步模块模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34-异步模块模式"}},[a._v("#")]),a._v(" 34. 异步模块模式")]),a._v(" "),s("h3",{attrs:{id:"_35-widget-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35-widget-模式"}},[a._v("#")]),a._v(" 35. Widget 模式")]),a._v(" "),s("h3",{attrs:{id:"_36-mvc-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36-mvc-模式"}},[a._v("#")]),a._v(" 36. MVC 模式")]),a._v(" "),s("h3",{attrs:{id:"_37-mvp-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37-mvp-模式"}},[a._v("#")]),a._v(" 37. MVP 模式")]),a._v(" "),s("h3",{attrs:{id:"_38-mvvm-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38-mvvm-模式"}},[a._v("#")]),a._v(" 38. MVVM 模式")])])}),[],!1,null,null,null);t.default=_.exports}}]);